// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterUser register user
//
// swagger:model RegisterUser
type RegisterUser struct {

	// address
	Address string `json:"address,omitempty"`

	// batch year
	BatchYear int64 `json:"batchYear,omitempty"`

	// binusian ID
	BinusianID int64 `json:"binusianID,omitempty"`

	// email
	// Required: true
	Email *string `json:"email"`

	// password
	// Required: true
	Password *string `json:"password"`

	// phone num
	PhoneNum string `json:"phoneNum,omitempty"`

	// role ID
	RoleID int64 `json:"roleID,omitempty"`

	// user first name
	// Required: true
	UserFirstName *string `json:"userFirstName"`

	// user ID
	UserID int64 `json:"userID,omitempty"`

	// user last name
	// Required: true
	UserLastName *string `json:"userLastName"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this register user
func (m *RegisterUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterUser) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *RegisterUser) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *RegisterUser) validateUserFirstName(formats strfmt.Registry) error {

	if err := validate.Required("userFirstName", "body", m.UserFirstName); err != nil {
		return err
	}

	return nil
}

func (m *RegisterUser) validateUserLastName(formats strfmt.Registry) error {

	if err := validate.Required("userLastName", "body", m.UserLastName); err != nil {
		return err
	}

	return nil
}

func (m *RegisterUser) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register user based on context it is used
func (m *RegisterUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegisterUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterUser) UnmarshalBinary(b []byte) error {
	var res RegisterUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
